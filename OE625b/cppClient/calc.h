/* calc.h
   Generated by wsdl2h 2.8.22 from http://192.168.1.104:15601/calcservice/metadata and typemap.dat
   2015-06-26 03:35:08 GMT

   DO NOT INCLUDE THIS FILE DIRECTLY INTO YOUR PROJECT BUILDS
   USE THE soapcpp2-GENERATED SOURCE CODE FILES FOR YOUR PROJECT BUILDS

   gSOAP XML Web services tools.
   Copyright (C) 2000-2014 Robert van Engelen, Genivia Inc. All Rights Reserved.
   Part of this software is released under one of the following licenses:
   GPL or Genivia's license for commercial use.
*/

/** @page page_notes Notes

@note HINTS:
 - Run soapcpp2 on calc.h to generate the SOAP/XML processing logic.
   Use soapcpp2 -I to specify paths for #import
   To build with STL, 'stlvector.h' is imported from 'import' dir in package.
   Use soapcpp2 -j to generate improved proxy and server classes.
 - Use wsdl2h -c and -s to generate pure C code or C++ code without STL.
 - Use 'typemap.dat' to control namespace bindings and type mappings.
   It is strongly recommended to customize the names of the namespace prefixes
   generated by wsdl2h. To do so, modify the prefix bindings in the Namespaces
   section below and add the modified lines to 'typemap.dat' to rerun wsdl2h.
 - Use Doxygen (www.doxygen.org) on this file to generate documentation.
 - Use wsdl2h -R to generate REST operations.
 - Use wsdl2h -nname to use name as the base namespace prefix instead of 'ns'.
 - Use wsdl2h -Nname for service prefix and produce multiple service bindings
 - Use wsdl2h -d to enable DOM support for xsd:anyType.
 - Use wsdl2h -g to auto-generate readers and writers for root elements.
 - Use wsdl2h -b to auto-generate bi-directional operations (duplex ops).
 - Struct/class members serialized as XML attributes are annotated with a '@'.
 - Struct/class members that have a special role are annotated with a '$'.

@warning
   DO NOT INCLUDE THIS ANNOTATED FILE DIRECTLY IN YOUR PROJECT SOURCE CODE.
   USE THE FILES GENERATED BY soapcpp2 FOR YOUR PROJECT'S SOURCE CODE:
   THE soapStub.h FILE CONTAINS THIS CONTENT WITHOUT ANNOTATIONS.

@copyright LICENSE:
@verbatim
--------------------------------------------------------------------------------
gSOAP XML Web services tools
Copyright (C) 2000-2015, Robert van Engelen, Genivia Inc. All Rights Reserved.

This software is released under one of the following licenses:
GPL or Genivia's license for commercial use.
--------------------------------------------------------------------------------
GPL license.

This program is free software; you can redistribute it and/or modify it under
the terms of the GNU General Public License as published by the Free Software
Foundation; either version 2 of the License, or (at your option) any later
version.

This program is distributed in the hope that it will be useful, but WITHOUT ANY
WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A
PARTICULAR PURPOSE. See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with
this program; if not, write to the Free Software Foundation, Inc., 59 Temple
Place, Suite 330, Boston, MA 02111-1307 USA

Author contact information:
engelen@genivia.com / engelen@acm.org

This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
--------------------------------------------------------------------------------
A commercial-use license is available from Genivia, Inc., contact@genivia.com
--------------------------------------------------------------------------------
@endverbatim

*/


//gsoapopt w

/******************************************************************************\
 *                                                                            *
 * Definitions                                                                *
 *   http://tempuri.org/                                                      *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Import                                                                     *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Schema Namespaces                                                          *
 *                                                                            *
\******************************************************************************/


/* NOTE:

It is strongly recommended to customize the names of the namespace prefixes
generated by wsdl2h. To do so, modify the prefix bindings below and add the
modified lines to typemap.dat to rerun wsdl2h:

wbICalc = "http://tempuri.org/"
JR1 = "http://o2.jrrpc.com/Imports"
JR2 = "http://o2.jrrpc.com/"
JR3 = "http://schemas.microsoft.com/2003/10/Serialization/"

*/

#define SOAP_NAMESPACE_OF_JR1	"http://o2.jrrpc.com/Imports"
//gsoap JR1   schema namespace:	http://o2.jrrpc.com/Imports
//gsoap JR1   schema form:	unqualified

#define SOAP_NAMESPACE_OF_JR2	"http://o2.jrrpc.com/"
//gsoap JR2   schema namespace:	http://o2.jrrpc.com/
//gsoap JR2   schema elementForm:	qualified
//gsoap JR2   schema attributeForm:	unqualified

#define SOAP_NAMESPACE_OF_JR3	"http://schemas.microsoft.com/2003/10/Serialization/"
//gsoap JR3   schema namespace:	http://schemas.microsoft.com/2003/10/Serialization/
//gsoap JR3   schema form:	qualified

/******************************************************************************\
 *                                                                            *
 * Built-in Schema Types and Top-Level Elements and Attributes                *
 *                                                                            *
\******************************************************************************/

/// Built-in XSD type "xs:anyType".
class xsd__anyType { _XML __item; struct soap *soap; };

/// Built-in XSD type "xs:base64Binary".
class xsd__base64Binary
{	unsigned char *__ptr;
	int __size;
	char *id, *type, *options; // NOTE: non-NULL for DIMEM/MIME/MTOM XOP attachments only
	struct soap *soap;
};

/// Built-in XSD type "xs:byte".
typedef char xsd__byte;

/// Built-in XSD type "xs:unsignedByte".
typedef unsigned char xsd__unsignedByte;

/// Primitive built-in type "xs:ID".
typedef char* xsd__ID;

/// Class wrapper for built-in type "xs:ID" derived from xsd__anyType.
/// Use virtual method soap_type() == SOAP_TYPE_xsd__ID_ to check runtime type (see soapStub.h).
class xsd__ID_ : public xsd__anyType
{ public:
    xsd__ID                              __item;                       
};

/// Primitive built-in type "xs:IDREF".
typedef char* xsd__IDREF;

/// Class wrapper for built-in type "xs:IDREF" derived from xsd__anyType.
/// Use virtual method soap_type() == SOAP_TYPE_xsd__IDREF_ to check runtime type (see soapStub.h).
class xsd__IDREF_ : public xsd__anyType
{ public:
    xsd__IDREF                           __item;                       
};

/// Class wrapper for built-in type "xs:QName" derived from xsd__anyType.
/// Use virtual method soap_type() == SOAP_TYPE_xsd__QName to check runtime type (see soapStub.h).
class xsd__QName : public xsd__anyType
{ public:
    _QName                               __item;                       
};

/// Primitive built-in type "xs:anyURI".
typedef char* xsd__anyURI;

/// Class wrapper for built-in type "xs:anyURI" derived from xsd__anyType.
/// Use virtual method soap_type() == SOAP_TYPE_xsd__anyURI_ to check runtime type (see soapStub.h).
class xsd__anyURI_ : public xsd__anyType
{ public:
    xsd__anyURI                          __item;                       
};

/// Class wrapper for built-in type "xs:base64Binary" derived from xsd__anyType.
/// Use virtual method soap_type() == SOAP_TYPE_xsd__base64Binary_ to check runtime type (see soapStub.h).
class xsd__base64Binary_ : public xsd__anyType
{ public:
    xsd__base64Binary                    __item;                       
};

/// Class wrapper for built-in type "xs:boolean" derived from xsd__anyType.
/// Use virtual method soap_type() == SOAP_TYPE_xsd__boolean to check runtime type (see soapStub.h).
class xsd__boolean : public xsd__anyType
{ public:
    bool                                 __item;                       
};

/// Class wrapper for built-in type "xs:byte" derived from xsd__anyType.
/// Use virtual method soap_type() == SOAP_TYPE_xsd__byte_ to check runtime type (see soapStub.h).
class xsd__byte_ : public xsd__anyType
{ public:
    xsd__byte                            __item;                       
};

/// Class wrapper for built-in type "xs:dateTime" derived from xsd__anyType.
/// Use virtual method soap_type() == SOAP_TYPE_xsd__dateTime to check runtime type (see soapStub.h).
class xsd__dateTime : public xsd__anyType
{ public:
    time_t                               __item;                       
};

/// Primitive built-in type "xs:decimal".
typedef char* xsd__decimal;

/// Class wrapper for built-in type "xs:decimal" derived from xsd__anyType.
/// Use virtual method soap_type() == SOAP_TYPE_xsd__decimal_ to check runtime type (see soapStub.h).
class xsd__decimal_ : public xsd__anyType
{ public:
    xsd__decimal                         __item;                       
};

/// Class wrapper for built-in type "xs:double" derived from xsd__anyType.
/// Use virtual method soap_type() == SOAP_TYPE_xsd__double to check runtime type (see soapStub.h).
class xsd__double : public xsd__anyType
{ public:
    double                               __item;                       
};

/// Primitive built-in type "xs:duration".
typedef char* xsd__duration;

/// Class wrapper for built-in type "xs:duration" derived from xsd__anyType.
/// Use virtual method soap_type() == SOAP_TYPE_xsd__duration_ to check runtime type (see soapStub.h).
class xsd__duration_ : public xsd__anyType
{ public:
    xsd__duration                        __item;                       
};

/// Class wrapper for built-in type "xs:float" derived from xsd__anyType.
/// Use virtual method soap_type() == SOAP_TYPE_xsd__float to check runtime type (see soapStub.h).
class xsd__float : public xsd__anyType
{ public:
    float                                __item;                       
};

/// Class wrapper for built-in type "xs:int" derived from xsd__anyType.
/// Use virtual method soap_type() == SOAP_TYPE_xsd__int to check runtime type (see soapStub.h).
class xsd__int : public xsd__anyType
{ public:
    int                                  __item;                       
};

/// Class wrapper for built-in type "xs:long" derived from xsd__anyType.
/// Use virtual method soap_type() == SOAP_TYPE_xsd__long to check runtime type (see soapStub.h).
class xsd__long : public xsd__anyType
{ public:
    LONG64                               __item;                       
};

/// Class wrapper for built-in type "xs:short" derived from xsd__anyType.
/// Use virtual method soap_type() == SOAP_TYPE_xsd__short to check runtime type (see soapStub.h).
class xsd__short : public xsd__anyType
{ public:
    short                                __item;                       
};

/// Class wrapper for built-in type "xs:string" derived from xsd__anyType.
/// Use virtual method soap_type() == SOAP_TYPE_xsd__string to check runtime type (see soapStub.h).
class xsd__string : public xsd__anyType
{ public:
    char*                                __item;                       
};

/// Class wrapper for built-in type "xs:unsignedByte" derived from xsd__anyType.
/// Use virtual method soap_type() == SOAP_TYPE_xsd__unsignedByte_ to check runtime type (see soapStub.h).
class xsd__unsignedByte_ : public xsd__anyType
{ public:
    xsd__unsignedByte                    __item;                       
};

/// Class wrapper for built-in type "xs:unsignedInt" derived from xsd__anyType.
/// Use virtual method soap_type() == SOAP_TYPE_xsd__unsignedInt to check runtime type (see soapStub.h).
class xsd__unsignedInt : public xsd__anyType
{ public:
    unsigned int                         __item;                       
};

/// Class wrapper for built-in type "xs:unsignedLong" derived from xsd__anyType.
/// Use virtual method soap_type() == SOAP_TYPE_xsd__unsignedLong to check runtime type (see soapStub.h).
class xsd__unsignedLong : public xsd__anyType
{ public:
    ULONG64                              __item;                       
};

/// Class wrapper for built-in type "xs:unsignedShort" derived from xsd__anyType.
/// Use virtual method soap_type() == SOAP_TYPE_xsd__unsignedShort to check runtime type (see soapStub.h).
class xsd__unsignedShort : public xsd__anyType
{ public:
    unsigned short                       __item;                       
};


/******************************************************************************\
 *                                                                            *
 * Forward Declarations                                                       *
 *                                                                            *
\******************************************************************************/


//  Forward declaration of class _JR2__Add.
class _JR2__Add;

//  Forward declaration of class _JR2__AddResponse.
class _JR2__AddResponse;


/******************************************************************************\
 *                                                                            *
 * Schema Types and Top-Level Elements and Attributes                         *
 *   http://o2.jrrpc.com/Imports                                              *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Schema Types and Top-Level Elements and Attributes                         *
 *   http://o2.jrrpc.com/                                                     *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Schema Types and Top-Level Elements and Attributes                         *
 *   http://schemas.microsoft.com/2003/10/Serialization/                      *
 *                                                                            *
\******************************************************************************/

/// @brief "http://schemas.microsoft.com/2003/10/Serialization/":char is a simpleType restriction of XSD type xs:int.
///
typedef int JR3__char;

/// @brief A class wrapper.
///
class JR3__char__ : public xsd__anyType
{ public:
    JR3__char                            __item;                       
};

/// @brief "http://schemas.microsoft.com/2003/10/Serialization/":duration is a simpleType restriction of XSD type xs:duration.
///
/// Content pattern is "\\-?P(\\d*D)?(T(\\d*H)?(\\d*M)?(\\d*(\\.\\d*)?S)?)?".
/// Value range is [-P10675199DT2H48M5.4775808S..P10675199DT2H48M5.4775807S].
typedef xsd__duration JR3__duration "\\-?P(\\d*D)?(T(\\d*H)?(\\d*M)?(\\d*(\\.\\d*)?S)?)?";

/// @brief A class wrapper.
///
class JR3__duration__ : public xsd__anyType
{ public:
    JR3__duration                        __item;                       
};

/// @brief "http://schemas.microsoft.com/2003/10/Serialization/":guid is a simpleType restriction of XSD type xs:string.
///
/// Content pattern is "[\\da-fA-F]{8}-[\\da-fA-F]{4}-[\\da-fA-F]{4}-[\\da-fA-F]{4}-[\\da-fA-F]{12}".
typedef char* JR3__guid "[\\da-fA-F]{8}-[\\da-fA-F]{4}-[\\da-fA-F]{4}-[\\da-fA-F]{4}-[\\da-fA-F]{12}";

/// @brief A class wrapper.
///
class JR3__guid__ : public xsd__anyType
{ public:
    JR3__guid                            __item;                       
};


/******************************************************************************\
 *                                                                            *
 * Schema Complex Types and Top-Level Elements                                *
 *   http://o2.jrrpc.com/Imports                                              *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Schema Complex Types and Top-Level Elements                                *
 *   http://o2.jrrpc.com/                                                     *
 *                                                                            *
\******************************************************************************/

/// @brief Top-level root element "http://o2.jrrpc.com/":Add
/// @brief "http://o2.jrrpc.com/":Add is a complexType.
///
/// class _JR2__Add operations:
/// - soap_new__JR2__Add(soap*) allocate
/// - soap_new__JR2__Add(soap*, int num) allocate array
/// - soap_new_req__JR2__Add(soap*, ...) allocate, set required members
/// - soap_new_set__JR2__Add(soap*, ...) allocate, set all public members
/// - int soap_read__JR2__Add(soap*, _JR2__Add*) deserialize from a stream
/// - int soap_write__JR2__Add(soap, _JR2__Add*) serialize to a stream
class _JR2__Add
{ public:
/// Element "x" of XSD type xs:double.
    double*                              x                              0;	///< Optional element.
/// Element "y" of XSD type xs:double.
    double*                              y                              0;	///< Optional element.
/// A handle to the soap struct that manages this instance (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://o2.jrrpc.com/":AddResponse
/// @brief "http://o2.jrrpc.com/":AddResponse is a complexType.
///
/// class _JR2__AddResponse operations:
/// - soap_new__JR2__AddResponse(soap*) allocate
/// - soap_new__JR2__AddResponse(soap*, int num) allocate array
/// - soap_new_req__JR2__AddResponse(soap*, ...) allocate, set required members
/// - soap_new_set__JR2__AddResponse(soap*, ...) allocate, set all public members
/// - int soap_read__JR2__AddResponse(soap*, _JR2__AddResponse*) deserialize from a stream
/// - int soap_write__JR2__AddResponse(soap, _JR2__AddResponse*) serialize to a stream
class _JR2__AddResponse
{ public:
/// Element "AddResult" of XSD type xs:double.
    double*                              AddResult                      0;	///< Optional element.
/// A handle to the soap struct that manages this instance (automatically set).
    struct soap                         *soap                          ;
};


/******************************************************************************\
 *                                                                            *
 * Schema Complex Types and Top-Level Elements                                *
 *   http://schemas.microsoft.com/2003/10/Serialization/                      *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Additional Top-Level Elements                                              *
 *   http://o2.jrrpc.com/Imports                                              *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Additional Top-Level Attributes                                            *
 *   http://o2.jrrpc.com/Imports                                              *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Additional Top-Level Elements                                              *
 *   http://o2.jrrpc.com/                                                     *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Additional Top-Level Attributes                                            *
 *   http://o2.jrrpc.com/                                                     *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Additional Top-Level Elements                                              *
 *   http://schemas.microsoft.com/2003/10/Serialization/                      *
 *                                                                            *
\******************************************************************************/

/// @brief Top-level root element "http://schemas.microsoft.com/2003/10/Serialization/":anyType of XSD type xs:anyType.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "http://schemas.microsoft.com/2003/10/Serialization/":anyURI of XSD type xs:anyURI.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "http://schemas.microsoft.com/2003/10/Serialization/":base64Binary of XSD type xs:base64Binary.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "http://schemas.microsoft.com/2003/10/Serialization/":boolean of XSD type xs:boolean.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "http://schemas.microsoft.com/2003/10/Serialization/":byte of XSD type xs:byte.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "http://schemas.microsoft.com/2003/10/Serialization/":dateTime of XSD type xs:dateTime.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "http://schemas.microsoft.com/2003/10/Serialization/":decimal of XSD type xs:decimal.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "http://schemas.microsoft.com/2003/10/Serialization/":double of XSD type xs:double.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "http://schemas.microsoft.com/2003/10/Serialization/":float of XSD type xs:float.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "http://schemas.microsoft.com/2003/10/Serialization/":int of XSD type xs:int.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "http://schemas.microsoft.com/2003/10/Serialization/":long of XSD type xs:long.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "http://schemas.microsoft.com/2003/10/Serialization/":QName of XSD type xs:QName.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "http://schemas.microsoft.com/2003/10/Serialization/":short of XSD type xs:short.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "http://schemas.microsoft.com/2003/10/Serialization/":string of XSD type xs:string.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "http://schemas.microsoft.com/2003/10/Serialization/":unsignedByte of XSD type xs:unsignedByte.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "http://schemas.microsoft.com/2003/10/Serialization/":unsignedInt of XSD type xs:unsignedInt.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "http://schemas.microsoft.com/2003/10/Serialization/":unsignedLong of XSD type xs:unsignedLong.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "http://schemas.microsoft.com/2003/10/Serialization/":unsignedShort of XSD type xs:unsignedShort.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "http://schemas.microsoft.com/2003/10/Serialization/":char of XSD type "http://schemas.microsoft.com/2003/10/Serialization/":char.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "http://schemas.microsoft.com/2003/10/Serialization/":duration of XSD type "http://schemas.microsoft.com/2003/10/Serialization/":duration.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "http://schemas.microsoft.com/2003/10/Serialization/":guid of XSD type "http://schemas.microsoft.com/2003/10/Serialization/":guid.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.


/******************************************************************************\
 *                                                                            *
 * Additional Top-Level Attributes                                            *
 *   http://schemas.microsoft.com/2003/10/Serialization/                      *
 *                                                                            *
\******************************************************************************/

/// @brief Top-level attribute "http://schemas.microsoft.com/2003/10/Serialization/":FactoryType of simpleType xs:QName.
/// @note Use wsdl2h option -g to auto-generate a top-level attribute declaration and processing code.

/// @brief Top-level attribute "http://schemas.microsoft.com/2003/10/Serialization/":Id of simpleType xs:ID.
/// @note Use wsdl2h option -g to auto-generate a top-level attribute declaration and processing code.

/// @brief Top-level attribute "http://schemas.microsoft.com/2003/10/Serialization/":Ref of simpleType xs:IDREF.
/// @note Use wsdl2h option -g to auto-generate a top-level attribute declaration and processing code.


/******************************************************************************\
 *                                                                            *
 * Services                                                                   *
 *                                                                            *
\******************************************************************************/

// This service supports SOAP 1.2 namespaces:
#import "soap12.h"

//gsoap wbICalc2 service name:	w07bICalc 
//gsoap wbICalc2 service type:	ICalc 
//gsoap wbICalc2 service port:	http://192.168.1.104:15618/calcservice/w07b 
//gsoap wbICalc2 service namespace:	http://tempuri.org/w07bICalc 
//gsoap wbICalc2 service transport:	http://schemas.xmlsoap.org/soap/http 

//gsoap wbICalc3 service name:	wbICalc 
//gsoap wbICalc3 service type:	ICalc 
//gsoap wbICalc3 service port:	http://192.168.1.104:15618/calcservice/wb 
//gsoap wbICalc3 service namespace:	http://tempuri.org/wbICalc 
//gsoap wbICalc3 service transport:	http://schemas.xmlsoap.org/soap/http 

/** @mainpage CalcService Definitions

@section CalcService_bindings Service Bindings

  - @ref w07bICalc

  - @ref wbICalc

@section CalcService_more More Information

  - @ref page_notes "Notes"

  - @ref page_XMLDataBinding "XML Data Binding"

  - @ref SOAP_ENV__Header "SOAP Header Content" (when applicable)

  - @ref SOAP_ENV__Detail "SOAP Fault Detail Content" (when applicable)


*/

/**

@page w07bICalc Binding "w07bICalc"

@section w07bICalc_operations Operations of Binding "w07bICalc"

  - @ref __wbICalc2__Add

@section w07bICalc_ports Endpoints of Binding "w07bICalc"

  - http://192.168.1.104:15618/calcservice/w07b

@section w07bICalc_policy Policy of Binding "w07bICalc"

See Section @ref w07bICalc_policy_enablers

  - WS-Policy applicable to the service endpoint ports:
	- Exactly one of the following:
		- All of the following:
			- [7.4] WS-Security Symmetric Binding requirements:
				- [7.1] Security Binding Algorithm Suite requirements:
					- Basic256
				- [7.2] WS-Security Header Layout requirements:
					- WS-Security headers 'declare before use' required (gSOAP default)
				- Symmetric Protection requirements:
					- [5.4.7] WS-SecureConversation required:
					  -# IncludeToken = http://docs.oasis-open.org/ws-sx/ws-securitypolicy/200702/IncludeToken/AlwaysToRecipient
						- Properties   = WS-SecureConversation RequireDerivedKeys
						- WS-SecureConversation STS issuing the secure conversation token does not support SCT/Amend RST messages						- SecureConversation BootstrapPolicy
							- [4.1.1] WS-Security Signed Parts requirements:
							  -# Body:
	@code
	#include "plugin/wsseapi.h"
	soap_wsse_sign_body(soap, <algorithm>, <key>, <keylen>);
	@endcode
							  -# Header elements:
	@code
	#include "plugin/wsseapi.h"
	soap_wsse_set_wsu_id(soap, "JR4__To JR4__From JR4__FaultTo JR4__ReplyTo JR4__MessageID JR4__RelatesTo JR4__Action ");
	@endcode
							- [4.2.1] Security Encrypted Parts requirements:
							  -# Body:
	@code
	#include "plugin/wsseapi.h"
	soap_wsse_encrypt_body(soap, <algorithm>, <key>, <keylen>);
	@endcode
							- [7.4] WS-Security Symmetric Binding requirements:
								- [7.1] Security Binding Algorithm Suite requirements:
									- Basic256
								- [7.2] WS-Security Header Layout requirements:
									- WS-Security headers 'declare before use' required (gSOAP default)
								- Symmetric Protection requirements:
									- [5.4.5] WS-Trust n-leg RST/RSTR SPNEGO binary negotiation protocol (SpnegoContext) required:
									  -# IncludeToken = http://docs.oasis-open.org/ws-sx/ws-securitypolicy/200702/IncludeToken/AlwaysToRecipient
									- Properties   = WS-SecureConversation RequireDerivedKeys
									- WS-SecureConversation STS issuing the secure conversation token does not support SCT/Cancel RST messages								- WS-Security Timestamp should be set prior to send:
	@code
	#include "plugin/wsseapi.h"
	soap_wsse_add_Timestamp(soap, "Timestamp", <seconds>);
	@endcode
								- WS-Security Timestamp presence and expiration verified post-receive with:
	@code
	#include "plugin/wsseapi.h"
	if (soap_wsse_verify_Timestamp(soap)) ...<error>...
	@endcode
								- WS-Security Encrypt Signature
	@code
	#include "plugin/wsseapi.h"
	soap_wsse_add_EncryptedKey_encrypt_only(soap, <SOAP_MEC_ENV_ENC_xxx_CBC>, NULL, <cert>, NULL, <issuer>, <serial>, "ds:Signature SOAP-ENV:Body");
	@endcode
								- WS-Security Sign Entire Headers and Body:
	@code
	#include "plugin/wsseapi.h"
	soap_wsse_set_wsu_id(soap, "<ns:tagname1> <ns:tagname2> ..."); // list each ns:tagname used in SOAP Header
	soap_wsse_sign_body(soap, <algorithm>, <key>, <keylen>);
	@endcode
							- [9.2] WSS: SOAP Message Security 1.1 options:
							- [10.1] WS-Trust 1.3 options:
								- Client Entropy
								- Server Entropy
								- Issued Tokens
				- WS-Security Timestamp should be set prior to send:
	@code
	#include "plugin/wsseapi.h"
	soap_wsse_add_Timestamp(soap, "Timestamp", <seconds>);
	@endcode
				- WS-Security Timestamp presence and expiration verified post-receive with:
	@code
	#include "plugin/wsseapi.h"
	if (soap_wsse_verify_Timestamp(soap)) ...<error>...
	@endcode
				- WS-Security Encrypt Signature
	@code
	#include "plugin/wsseapi.h"
	soap_wsse_add_EncryptedKey_encrypt_only(soap, <SOAP_MEC_ENV_ENC_xxx_CBC>, NULL, <cert>, NULL, <issuer>, <serial>, "ds:Signature SOAP-ENV:Body");
	@endcode
				- WS-Security Sign Entire Headers and Body:
	@code
	#include "plugin/wsseapi.h"
	soap_wsse_set_wsu_id(soap, "<ns:tagname1> <ns:tagname2> ..."); // list each ns:tagname used in SOAP Header
	soap_wsse_sign_body(soap, <algorithm>, <key>, <keylen>);
	@endcode
			- [9.2] WSS: SOAP Message Security 1.1 options:
			- [10.1] WS-Trust 1.3 options:
				- Client Entropy
				- Server Entropy
				- Issued Tokens
			- WS-Addressing is used


*/

/**

@page wbICalc Binding "wbICalc"

@section wbICalc_operations Operations of Binding "wbICalc"

  - @ref __wbICalc3__Add

@section wbICalc_ports Endpoints of Binding "wbICalc"

  - http://192.168.1.104:15618/calcservice/wb

@section wbICalc_policy Policy of Binding "wbICalc"

See Section @ref wbICalc_policy_enablers

  - WS-Policy applicable to the service endpoint ports:
	- Exactly one of the following:
		- All of the following:
			- [7.4] WS-Security Symmetric Binding requirements:
				- [7.1] Security Binding Algorithm Suite requirements:
					- Basic256
				- [7.2] WS-Security Header Layout requirements:
					- WS-Security headers 'declare before use' required (gSOAP default)
				- Symmetric Protection requirements:
					- [5.4.7] WS-SecureConversation required:
					  -# IncludeToken = http://schemas.xmlsoap.org/ws/2005/07/securitypolicy/IncludeToken/AlwaysToRecipient
						- Properties   = WS-SecureConversation RequireDerivedKeys
						- SecureConversation BootstrapPolicy
							- [4.1.1] WS-Security Signed Parts requirements:
							  -# Body:
	@code
	#include "plugin/wsseapi.h"
	soap_wsse_sign_body(soap, <algorithm>, <key>, <keylen>);
	@endcode
							  -# Header elements:
	@code
	#include "plugin/wsseapi.h"
	soap_wsse_set_wsu_id(soap, "JR4__To JR4__From JR4__FaultTo JR4__ReplyTo JR4__MessageID JR4__RelatesTo JR4__Action ");
	@endcode
							- [4.2.1] Security Encrypted Parts requirements:
							  -# Body:
	@code
	#include "plugin/wsseapi.h"
	soap_wsse_encrypt_body(soap, <algorithm>, <key>, <keylen>);
	@endcode
							- [7.4] WS-Security Symmetric Binding requirements:
								- [7.1] Security Binding Algorithm Suite requirements:
									- Basic256
								- [7.2] WS-Security Header Layout requirements:
									- WS-Security headers 'declare before use' required (gSOAP default)
								- Symmetric Protection requirements:
									- [5.4.5] WS-Trust n-leg RST/RSTR SPNEGO binary negotiation protocol (SpnegoContext) required:
									  -# IncludeToken = http://schemas.xmlsoap.org/ws/2005/07/securitypolicy/IncludeToken/AlwaysToRecipient
									- Properties   = WS-SecureConversation RequireDerivedKeys
								- WS-Security Timestamp should be set prior to send:
	@code
	#include "plugin/wsseapi.h"
	soap_wsse_add_Timestamp(soap, "Timestamp", <seconds>);
	@endcode
								- WS-Security Timestamp presence and expiration verified post-receive with:
	@code
	#include "plugin/wsseapi.h"
	if (soap_wsse_verify_Timestamp(soap)) ...<error>...
	@endcode
								- WS-Security Encrypt Signature
	@code
	#include "plugin/wsseapi.h"
	soap_wsse_add_EncryptedKey_encrypt_only(soap, <SOAP_MEC_ENV_ENC_xxx_CBC>, NULL, <cert>, NULL, <issuer>, <serial>, "ds:Signature SOAP-ENV:Body");
	@endcode
								- WS-Security Sign Entire Headers and Body:
	@code
	#include "plugin/wsseapi.h"
	soap_wsse_set_wsu_id(soap, "<ns:tagname1> <ns:tagname2> ..."); // list each ns:tagname used in SOAP Header
	soap_wsse_sign_body(soap, <algorithm>, <key>, <keylen>);
	@endcode
							- [9.2] WSS: SOAP Message Security 1.1 options:
							- [10.1] WS-Trust 1.0 options:
								- Client Entropy
								- Server Entropy
								- Issued Tokens
				- WS-Security Timestamp should be set prior to send:
	@code
	#include "plugin/wsseapi.h"
	soap_wsse_add_Timestamp(soap, "Timestamp", <seconds>);
	@endcode
				- WS-Security Timestamp presence and expiration verified post-receive with:
	@code
	#include "plugin/wsseapi.h"
	if (soap_wsse_verify_Timestamp(soap)) ...<error>...
	@endcode
				- WS-Security Encrypt Signature
	@code
	#include "plugin/wsseapi.h"
	soap_wsse_add_EncryptedKey_encrypt_only(soap, <SOAP_MEC_ENV_ENC_xxx_CBC>, NULL, <cert>, NULL, <issuer>, <serial>, "ds:Signature SOAP-ENV:Body");
	@endcode
				- WS-Security Sign Entire Headers and Body:
	@code
	#include "plugin/wsseapi.h"
	soap_wsse_set_wsu_id(soap, "<ns:tagname1> <ns:tagname2> ..."); // list each ns:tagname used in SOAP Header
	soap_wsse_sign_body(soap, <algorithm>, <key>, <keylen>);
	@endcode
			- [9.2] WSS: SOAP Message Security 1.1 options:
			- [10.1] WS-Trust 1.0 options:
				- Client Entropy
				- Server Entropy
				- Issued Tokens
			- WS-Addressing is used


*/

/******************************************************************************\
 *                                                                            *
 * Service Binding                                                            *
 *   w07bICalc                                                                *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __wbICalc2__Add                                                          *
 *                                                                            *
\******************************************************************************/


/** Operation "__wbICalc2__Add" of service binding "w07bICalc".

  - WS-Policy applicable to the request message:
	- Exactly one of the following:
		- All of the following:
			- [4.1.1] WS-Security Signed Parts requirements:
			  -# Body:
	@code
	#include "plugin/wsseapi.h"
	soap_wsse_sign_body(soap, <algorithm>, <key>, <keylen>);
	@endcode
			  -# Header elements:
	@code
	#include "plugin/wsseapi.h"
	soap_wsse_set_wsu_id(soap, "JR4__To JR4__From JR4__FaultTo JR4__ReplyTo JR4__MessageID JR4__RelatesTo JR4__Action ");
	@endcode
			- [4.2.1] Security Encrypted Parts requirements:
			  -# Body:
	@code
	#include "plugin/wsseapi.h"
	soap_wsse_encrypt_body(soap, <algorithm>, <key>, <keylen>);
	@endcode

  - WS-Policy applicable to the response message:
	- Exactly one of the following:
		- All of the following:
			- [4.1.1] WS-Security Signed Parts requirements:
			  -# Body:
	@code
	#include "plugin/wsseapi.h"
	soap_wsse_sign_body(soap, <algorithm>, <key>, <keylen>);
	@endcode
			  -# Header elements:
	@code
	#include "plugin/wsseapi.h"
	soap_wsse_set_wsu_id(soap, "JR4__To JR4__From JR4__FaultTo JR4__ReplyTo JR4__MessageID JR4__RelatesTo JR4__Action ");
	@endcode
			- [4.2.1] Security Encrypted Parts requirements:
			  -# Body:
	@code
	#include "plugin/wsseapi.h"
	soap_wsse_encrypt_body(soap, <algorithm>, <key>, <keylen>);
	@endcode

  - SOAP document/literal style messaging

  - Action: "http://o2.jrrpc.com/ICalc/Add"

  - Addressing input action: "http://o2.jrrpc.com/ICalc/Add"

  - Addressing output action: "http://o2.jrrpc.com/ICalc/AddResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___wbICalc2__Add(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _JR2__Add*                          JR2__Add,
    // output parameters:
    _JR2__AddResponse                  &JR2__AddResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __wbICalc2__Add(
    struct soap *soap,
    // input parameters:
    _JR2__Add*                          JR2__Add,
    // output parameters:
    _JR2__AddResponse                  &JR2__AddResponse
  );
@endcode

C++ proxy class (defined in soapw07bICalcProxy.h):
@code
  class w07bICalcProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapw07bICalcService.h):
@code
  class w07bICalcService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap wbICalc2 service method-protocol:	Add SOAP
//gsoap wbICalc2 service method-style:	Add document
//gsoap wbICalc2 service method-encoding:	Add literal
//gsoap wbICalc2 service method-input-action:	Add http://o2.jrrpc.com/ICalc/Add
//gsoap wbICalc2 service method-output-action:	Add http://o2.jrrpc.com/ICalc/AddResponse
int __wbICalc2__Add(
    _JR2__Add*                          JR2__Add,	///< Input parameter
    _JR2__AddResponse                  &JR2__AddResponse	///< Output parameter
);

/**

@page w07bICalc Binding "w07bICalc"

@section w07bICalc_policy_enablers Policy Enablers of Binding "w07bICalc"

Based on policies and protocol requirements, this service requires importing "wsse.h" "wst.h" "wsa5.h"

  - WS-Policy reminders and enablers (when applicable):
    - WS-Addressing 1.0 (2005/08, accepts 2004/08):
	@code
	#import "wsa5.h" // to be added to this header file for the soapcpp2 build step
	@endcode
	@code
	#include "plugin/wsaapi.h"
	soap_register_plugin(soap, soap_wsa); // register the wsa plugin in your code
	// See the user guide gsoap/doc/wsa/html/index.html
	@endcode
    - WS-Addressing (2004/08):
	@code
	#import "wsa.h" // to be added to this header file for the soapcpp2 build step
	@endcode
	@code
	#include "plugin/wsaapi.h"
	soap_register_plugin(soap, soap_wsa); // register the wsa plugin in your code
	// See the user guide gsoap/doc/wsa/html/index.html
	@endcode
    - WS-ReliableMessaging 1.0:
	@code
	#import "wsrm5.h" // to be added to this header file for the soapcpp2 build step
	@endcode
	@code
	#include "plugin/wsrmapi.h"
	soap_register_plugin(soap, soap_wsa); // register the wsa plugin in your code
	soap_register_plugin(soap, soap_wsrm); // register the wsrm plugin in your code
	// See the user guide gsoap/doc/wsrm/html/index.html
	@endcode
    - WS-ReliableMessaging 1.1:
	@code
	#import "wsrm.h" // to be added to this header file for the soapcpp2 build step
	@endcode
	@code
	#include "plugin/wsrmapi.h"
	soap_register_plugin(soap, soap_wsa); // register the wsa plugin in your code
	soap_register_plugin(soap, soap_wsrm); // register the wsrm plugin in your code
	// See the user guide gsoap/doc/wsrm/html/index.html
	@endcode
    - WS-Discovery 1.0:
	@code
	#import "wsrm5.h" // to be added to this header file for the soapcpp2 build step
	@endcode
	@code
	#include "plugin/wsddapi.h" // See the user guide gsoap/doc/wsdd/html/index.html
	@endcode
    - WS-Discovery 1.1:
	@code
	#import "wsrm.h" // to be added to this header file for the soapcpp2 build step
	@endcode
	@code
	#include "plugin/wsddapi.h" // See the user guide gsoap/doc/wsdd/html/index.html
	@endcode
    - WS-Security (SOAP Message Security) 1.0 (accepts 1.1):
	@code
	#import "wsse.h" // to be added to this header file for the soapcpp2 build step
	@endcode
	@code
	#include "plugin/wsseapi.h"
	soap_register_plugin(soap, soap_wsse); // register the wsse plugin in your code
	// See the user guide gsoap/doc/wsse/html/index.html
	@endcode
    - WS-Security (SOAP Message Security) 1.1 (accepts 1.0):
	@code
	#import "wsse11.h" // to be added to this header file for the soapcpp2 build step
	@endcode
	@code
	#include "plugin/wsseapi.h"
	soap_register_plugin(soap, soap_wsse); // register the wsse plugin in your code
	// See the user guide gsoap/doc/wsse/html/index.html
	@endcode
    - HTTP Digest Authentication:
	@code
	#include "plugin/httpda.h"
	soap_register_plugin(soap, soap_http_da); // register the HTTP DA plugin in your code
	// See the user guide gsoap/doc/httpda/html/index.html
	@endcode
*/

#import "wsse.h"
#import "wst.h"
#import "wsa5.h"

/******************************************************************************\
 *                                                                            *
 * Service Binding                                                            *
 *   wbICalc                                                                  *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __wbICalc3__Add                                                          *
 *                                                                            *
\******************************************************************************/


/** Operation "__wbICalc3__Add" of service binding "wbICalc".

  - WS-Policy applicable to the request message:
	- Exactly one of the following:
		- All of the following:
			- [4.1.1] WS-Security Signed Parts requirements:
			  -# Body:
	@code
	#include "plugin/wsseapi.h"
	soap_wsse_sign_body(soap, <algorithm>, <key>, <keylen>);
	@endcode
			  -# Header elements:
	@code
	#include "plugin/wsseapi.h"
	soap_wsse_set_wsu_id(soap, "JR4__To JR4__From JR4__FaultTo JR4__ReplyTo JR4__MessageID JR4__RelatesTo JR4__Action ");
	@endcode
			- [4.2.1] Security Encrypted Parts requirements:
			  -# Body:
	@code
	#include "plugin/wsseapi.h"
	soap_wsse_encrypt_body(soap, <algorithm>, <key>, <keylen>);
	@endcode

  - WS-Policy applicable to the response message:
	- Exactly one of the following:
		- All of the following:
			- [4.1.1] WS-Security Signed Parts requirements:
			  -# Body:
	@code
	#include "plugin/wsseapi.h"
	soap_wsse_sign_body(soap, <algorithm>, <key>, <keylen>);
	@endcode
			  -# Header elements:
	@code
	#include "plugin/wsseapi.h"
	soap_wsse_set_wsu_id(soap, "JR4__To JR4__From JR4__FaultTo JR4__ReplyTo JR4__MessageID JR4__RelatesTo JR4__Action ");
	@endcode
			- [4.2.1] Security Encrypted Parts requirements:
			  -# Body:
	@code
	#include "plugin/wsseapi.h"
	soap_wsse_encrypt_body(soap, <algorithm>, <key>, <keylen>);
	@endcode

  - SOAP document/literal style messaging

  - Action: "http://o2.jrrpc.com/ICalc/Add"

  - Addressing input action: "http://o2.jrrpc.com/ICalc/Add"

  - Addressing output action: "http://o2.jrrpc.com/ICalc/AddResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___wbICalc3__Add(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _JR2__Add*                          JR2__Add,
    // output parameters:
    _JR2__AddResponse                  &JR2__AddResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __wbICalc3__Add(
    struct soap *soap,
    // input parameters:
    _JR2__Add*                          JR2__Add,
    // output parameters:
    _JR2__AddResponse                  &JR2__AddResponse
  );
@endcode

C++ proxy class (defined in soapwbICalcProxy.h):
@code
  class wbICalcProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapwbICalcService.h):
@code
  class wbICalcService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap wbICalc3 service method-protocol:	Add SOAP
//gsoap wbICalc3 service method-style:	Add document
//gsoap wbICalc3 service method-encoding:	Add literal
//gsoap wbICalc3 service method-input-action:	Add http://o2.jrrpc.com/ICalc/Add
//gsoap wbICalc3 service method-output-action:	Add http://o2.jrrpc.com/ICalc/AddResponse
int __wbICalc3__Add(
    _JR2__Add*                          JR2__Add,	///< Input parameter
    _JR2__AddResponse                  &JR2__AddResponse	///< Output parameter
);

/**

@page wbICalc Binding "wbICalc"

@section wbICalc_policy_enablers Policy Enablers of Binding "wbICalc"

Based on policies and protocol requirements, this service requires importing "wsse.h" "wst.h" "wsa5.h"

  - WS-Policy reminders and enablers (when applicable):
    - WS-Addressing 1.0 (2005/08, accepts 2004/08):
	@code
	#import "wsa5.h" // to be added to this header file for the soapcpp2 build step
	@endcode
	@code
	#include "plugin/wsaapi.h"
	soap_register_plugin(soap, soap_wsa); // register the wsa plugin in your code
	// See the user guide gsoap/doc/wsa/html/index.html
	@endcode
    - WS-Addressing (2004/08):
	@code
	#import "wsa.h" // to be added to this header file for the soapcpp2 build step
	@endcode
	@code
	#include "plugin/wsaapi.h"
	soap_register_plugin(soap, soap_wsa); // register the wsa plugin in your code
	// See the user guide gsoap/doc/wsa/html/index.html
	@endcode
    - WS-ReliableMessaging 1.0:
	@code
	#import "wsrm5.h" // to be added to this header file for the soapcpp2 build step
	@endcode
	@code
	#include "plugin/wsrmapi.h"
	soap_register_plugin(soap, soap_wsa); // register the wsa plugin in your code
	soap_register_plugin(soap, soap_wsrm); // register the wsrm plugin in your code
	// See the user guide gsoap/doc/wsrm/html/index.html
	@endcode
    - WS-ReliableMessaging 1.1:
	@code
	#import "wsrm.h" // to be added to this header file for the soapcpp2 build step
	@endcode
	@code
	#include "plugin/wsrmapi.h"
	soap_register_plugin(soap, soap_wsa); // register the wsa plugin in your code
	soap_register_plugin(soap, soap_wsrm); // register the wsrm plugin in your code
	// See the user guide gsoap/doc/wsrm/html/index.html
	@endcode
    - WS-Discovery 1.0:
	@code
	#import "wsrm5.h" // to be added to this header file for the soapcpp2 build step
	@endcode
	@code
	#include "plugin/wsddapi.h" // See the user guide gsoap/doc/wsdd/html/index.html
	@endcode
    - WS-Discovery 1.1:
	@code
	#import "wsrm.h" // to be added to this header file for the soapcpp2 build step
	@endcode
	@code
	#include "plugin/wsddapi.h" // See the user guide gsoap/doc/wsdd/html/index.html
	@endcode
    - WS-Security (SOAP Message Security) 1.0 (accepts 1.1):
	@code
	#import "wsse.h" // to be added to this header file for the soapcpp2 build step
	@endcode
	@code
	#include "plugin/wsseapi.h"
	soap_register_plugin(soap, soap_wsse); // register the wsse plugin in your code
	// See the user guide gsoap/doc/wsse/html/index.html
	@endcode
    - WS-Security (SOAP Message Security) 1.1 (accepts 1.0):
	@code
	#import "wsse11.h" // to be added to this header file for the soapcpp2 build step
	@endcode
	@code
	#include "plugin/wsseapi.h"
	soap_register_plugin(soap, soap_wsse); // register the wsse plugin in your code
	// See the user guide gsoap/doc/wsse/html/index.html
	@endcode
    - HTTP Digest Authentication:
	@code
	#include "plugin/httpda.h"
	soap_register_plugin(soap, soap_http_da); // register the HTTP DA plugin in your code
	// See the user guide gsoap/doc/httpda/html/index.html
	@endcode
*/

#import "wsse.h"
#import "wst.h"
#import "wsa5.h"

/******************************************************************************\
 *                                                                            *
 * XML Data Binding                                                           *
 *                                                                            *
\******************************************************************************/


/**

@page page_XMLDataBinding XML Data Binding

SOAP/XML services use data bindings contractually bound by WSDL and auto-
generated by wsdl2h and soapcpp2 (see Service Bindings). Plain data bindings
are adopted from XML schemas as part of the WSDL types section or when running
wsdl2h on a set of schemas to produce non-SOAP-based XML data bindings.

The following readers and writers are C/C++ data type (de)serializers auto-
generated by wsdl2h and soapcpp2. Run soapcpp2 on this file to generate the
(de)serialization code, which is stored in soapC.c[pp]. Include "soapH.h" in
your code to import these data type and function declarations. Only use the
soapcpp2-generated files in your project build. Do not include the wsdl2h-
generated .h file in your code.

Data can be read in XML and deserialized from:
  - a file descriptor, using soap->recvfd = fd
  - a socket, using soap->socket = ...
  - a C++ stream, using soap->is = ...
  - a buffer, using the soap->frecv() callback

Data can be serialized in XML and written to:
  - a file descriptor, using soap->sendfd = fd
  - a socket, using soap->socket = ...
  - a C++ stream, using soap->os = ...
  - a buffer, using the soap->fsend() callback

The following options are available for (de)serialization control:
  - soap->encodingStyle = NULL; to remove SOAP 1.1/1.2 encodingStyle
  - soap_mode(soap, SOAP_XML_TREE); XML without id-ref (no cycles!)
  - soap_mode(soap, SOAP_XML_GRAPH); XML with id-ref (including cycles)
  - soap_set_namespaces(soap, struct Namespace *nsmap); to set xmlns bindings


@section JR1 Top-level root elements of schema "http://o2.jrrpc.com/Imports"

@section JR2 Top-level root elements of schema "http://o2.jrrpc.com/"

  - <Add> @ref _JR2__Add
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__JR2__Add(struct soap*, _JR2__Add*);
    // Writer (returns SOAP_OK on success):
    soap_write__JR2__Add(struct soap*, _JR2__Add*);
    @endcode

  - <AddResponse> @ref _JR2__AddResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__JR2__AddResponse(struct soap*, _JR2__AddResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__JR2__AddResponse(struct soap*, _JR2__AddResponse*);
    @endcode

@section JR3 Top-level root elements of schema "http://schemas.microsoft.com/2003/10/Serialization/"

  - <anyType> (use wsdl2h option -g to auto-generate)

  - <anyURI> (use wsdl2h option -g to auto-generate)

  - <base64Binary> (use wsdl2h option -g to auto-generate)

  - <boolean> (use wsdl2h option -g to auto-generate)

  - <byte> (use wsdl2h option -g to auto-generate)

  - <dateTime> (use wsdl2h option -g to auto-generate)

  - <decimal> (use wsdl2h option -g to auto-generate)

  - <double> (use wsdl2h option -g to auto-generate)

  - <float> (use wsdl2h option -g to auto-generate)

  - <int> (use wsdl2h option -g to auto-generate)

  - <long> (use wsdl2h option -g to auto-generate)

  - <QName> (use wsdl2h option -g to auto-generate)

  - <short> (use wsdl2h option -g to auto-generate)

  - <string> (use wsdl2h option -g to auto-generate)

  - <unsignedByte> (use wsdl2h option -g to auto-generate)

  - <unsignedInt> (use wsdl2h option -g to auto-generate)

  - <unsignedLong> (use wsdl2h option -g to auto-generate)

  - <unsignedShort> (use wsdl2h option -g to auto-generate)

  - <char> (use wsdl2h option -g to auto-generate)

  - <duration> (use wsdl2h option -g to auto-generate)

  - <guid> (use wsdl2h option -g to auto-generate)

*/

/* End of calc.h */
